#!/usr/bin/env perl

#PODNAME: zxtm-node

use strict;
use warnings;

local $| = 1;

use FindBin;
use lib "$FindBin::Bin/../lib";

use JSON;

use Net::ZXTM;

use Data::Dumper;

my $cfg = Net::ZXTM->configuration();

use Getopt::Long;
use Pod::Usage;

my %opts;
GetOptions(\%opts,
'help|?',
'man',
'drain',
'enable',
'disable',
'reason=s',
'dry-run|n',
) or pod2usage(2);

pod2usage(1) if $opts{help};
pod2usage(-exitval => 0, -verbose => 2) if $opts{man};

my @nodes = @ARGV;

my $sum = ($opts{drain}||0) + ($opts{enable}||0) + ($opts{disable}||0);

if ($sum > 1) {
  die "Specify one of --drain, --enable, --disable";
}

my $nodes = get_nodes($cfg);

#XXX: Inject, CHI-style
sub Cache::BaseCache::compute {
    my ( $self, $key, $expiry, $sub ) = @_;

    my $val = $self->get($key);

    if ( defined $val ) {
        return $val;
    }

    $val = $sub->();
    $self->set( $key, $val, $expiry );
    return $val;
}

sub get_nodes {
    my $cfg = shift;
    my %nodes;
    foreach my $section ( $cfg->Sections ) {
        next if $section eq 'global';

# We specify all members of the cluster, but talk only to the first one (for now)
        my @urls = $cfg->val( $section, 'url' );
        my $url = $urls[0];

        my $username = $cfg->val( $section, 'username', $ENV{ZXTM_USER} );
        my $password = $cfg->val( $section, 'password', $ENV{ZXTM_PASS} );

        my $uri  = URI->new($url);
        my $host = $uri->host;

        my $zxtm = Net::ZXTM->new( $url, $username, $password, $cfg );

        my $pools = $zxtm->cached_call("/config/active/pools");

        foreach my $p (@$pools) {
            my $name = $p->{name};
            my $pool = $zxtm->cached_call("/config/active/pools/$name");

            my $nodes_table = $pool->{properties}{basic}{nodes_table};
	    my $note = $pool->{properties}{basic}{note};

            foreach my $node (@$nodes_table) {
                my ( $host, $port ) = split( ':', $node->{node} );

                $node->{zxtm} = $url;
		$node->{'zxtm-api'} = $zxtm;
                $node->{port} = $port;

                $nodes{$host}{zxtm}{$url}{pools}{$name} = $node;

                if ( my $reverse = $zxtm->reverse_ip($host) ) {
                    $nodes{$reverse}{zxtm}{$url}{pools}{$name} = $node;
                }
            }
        }
    }

    return \%nodes;
}

#print Dumper($nodes);

my $reason = $opts{reason};
foreach my $node (@nodes) {
    if ( exists( $nodes->{$node} ) ) {
        if ($opts{disable}) {
	  disable_node($node, $nodes->{$node}, $reason);
	}
	elsif ($opts{drain}) {
	  drain_node($node, $nodes->{$node}, $reason);
	}
	elsif ($opts{enable}) {
	  enable_node($node, $nodes->{$node}, $reason);
	}
	else {
          print_info( $node, $nodes->{$node} );
	}
    }
}

sub enable_node {
  my ($node, $info, $reason) = @_;
  
  return change_node($node, $info, 'active', $reason);
}

sub disable_node {
  my ($node, $info, $reason) = @_;
  
  return change_node($node, $info, 'disabled', $reason);
}

sub drain_node {
  my ($node, $info, $reason) = @_;
  
  return change_node($node, $info, 'draining', $reason);
}

use URI::Escape;
sub change_node {
  my ($node, $info, $state, $reason) = @_;
    
  my $zxtms = $info->{zxtm};

  foreach my $zxtm ( sort keys %$zxtms ) {
    my $z = $zxtms->{$zxtm};
    print "  [zxtm $zxtm] \n";

    my $pools = $z->{pools};
    foreach my $pool ( sort keys %$pools ) {  
        my $p = $pools->{$pool};
	my $node_name = $p->{node};
	my $zxtm = $p->{'zxtm-api'};
	my $config = $zxtm->call_refresh("/config/active/pools/$pool");
	
	my $nodes_table = $config->{properties}{basic}{nodes_table};
	my $note =  $config->{properties}{basic}{note};
	
	foreach my $n (@$nodes_table) {
	  if ($n->{node} eq $node_name) {
	    my $cur_state = $n->{state};
	    my $weight = $n->{weight};
	    my $port = $p->{port};

            if ( my $port_name = getservbyport( $port, "tcp" ) ) {
                $port = "$port_name/$port";
            }

            print "    [pool $pool]\n";
	    print "      note $note\n" if defined $note;
            print "      port $port\n";
            print "      state $cur_state => $state\n";
            print "      weight $weight\n" if defined $weight;

	    $n->{state} = $state;
	    last;
	  }
	}
	
	$config = {
	  properties => {
	    basic => {
	      nodes_table => $nodes_table,
	    },
	  },
	};
	
	if (defined $reason) {
	  #XXX: Check $note so we don't quash existing notes...
	  my $msg = "Changed by zxtm-node : $reason";
	  $note ||= "";
	  
	  if ($note ne $msg) {
	    print "      note '$note' => '$msg'\n";
	    $config->{properties}{basic}{note} = $msg;
	  }
	}
	
	$zxtm->alter("/config/active/pools/$pool", $config) unless $opts{'dry-run'};
    }
  }
}

sub print_info {
    my ( $node, $info ) = @_;

    print "* $node\n";

    my $zxtms = $info->{zxtm};

    foreach my $zxtm ( sort keys %$zxtms ) {
        my $z = $zxtms->{$zxtm};
        print " [zxtm $zxtm] \n";

        my $pools = $z->{pools};
        foreach my $pool ( sort keys %$pools ) {
            my $p = $pools->{$pool};

            my $port = $p->{port};

            if ( my $port_name = getservbyport( $port, "tcp" ) ) {
                $port = "$port_name/$port";
            }

            my $state  = $p->{state};
            my $weight = $p->{weight};

            print "  [pool $pool]\n";
            print "    port $port\n";
            print "    state $state\n";
            print "    weight $weight\n" if defined $weight;
        }
    }
}

__END__

=head1 NAME

sample - Using GetOpt::Long and Pod::Usage

=head1 SYNOPSIS

node-zxtm [options] [node ...]

  Options:
   -help            brief help message
   -man             full documentation
   -disable         disable the node
   -enable          enable the node
   -drain           drain the node


=head1 OPTIONS

=over 4

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> allows for cross-cluster ZXTM node querying and modification

=cut


